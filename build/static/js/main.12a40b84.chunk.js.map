{"version":3,"sources":["components/AboutUs.js","components/Alert.js","components/Navabar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["AboutUs","useState","color","backgroundColor","borderColor","mystyle","setStyle","btnText","setBtnText","className","style","class","id","type","onClick","Alert","props","alert","role","msg","Navabar","mode","to","title","modeText","togglemode","htmlFor","text","TextForm","setText","heading","rows","value","onChange","event","target","console","log","newText","toUpperCase","newlowtext","toLowerCase","length","split","App","setMode","setModeText","setAlert","showAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12a40b84.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react/cjs/react.development'\r\n\r\nexport default function AboutUs() {\r\n\r\n    const [mystyle,setStyle]=useState({\r\n        color:'black',\r\n        backgroundColor:\"white\",\r\n        borderColor:\"black\"\r\n    })\r\n\r\n    const [btnText,setBtnText]=useState('Enable Dark Mode');\r\n\r\n    const handleClick=()=>{\r\n        if(mystyle.color==\"black\")\r\n        {\r\n        setStyle({\r\n            color:\"white\",\r\n            backgroundColor:\"black\",\r\n            borderColor:\"white\"\r\n        })\r\n        setBtnText('Enable Light Mode');\r\n    }\r\n    else{\r\n        setStyle({\r\n            color:\"black\",\r\n            backgroundColor:\"white\",\r\n            borderColor:\"black\"\r\n        })\r\n        setBtnText('Enable Dark Mode');\r\n    }\r\n    }\r\n\r\n    return (\r\n     <div className=\"container my-3\" style={mystyle}>\r\n         <h1>About US</h1>\r\n            <div class=\"accordion\" id=\"accordionExample\" >\r\n         <div class=\"accordion-item\" style={mystyle}>\r\n            <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={mystyle}>\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\" >\r\n            <div class=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n         </div>\r\n         <div class=\"accordion-item\" style={mystyle}>\r\n            <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={mystyle}>\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div class=\"accordion-body\">\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n         </div>\r\n         <div class=\"accordion-item\" style={mystyle}>\r\n            <h2 class=\"accordion-header\" id=\"headingThree\">\r\n            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={mystyle}>\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div class=\"accordion-body\">\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n         </div>\r\n        </div>\r\n        <button className=\"btn btn-primary my-2\" onClick={handleClick}>{btnText}</button>\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert &&  <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{props.alert.msg}</strong> {props.alert.type}\r\n  {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navabar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div class={`form-check form-switch text-${props.modeText==='light'?'dark':'light'}`}>\r\n              <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.togglemode}/>\r\n              <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.text}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const [text,setText]=useState('');\r\n\t\r\n\t\tconst btnClicked=()=>{\r\n\t\t\tconsole.log(typeof text)\r\n\t\t\t let newText=text.toUpperCase();\r\n\t\t\t\tsetText(newText);\r\n\t\t\t\tconsole.log(newText)\r\n\t\t}\r\n\r\n\t\tconst btnlowclicked=()=>{\r\n\t\t\t  let newlowtext=text.toLowerCase();\r\n\t\t\t\t\tsetText(newlowtext);\r\n\t\t\t\t\t\r\n\t\t}\r\n\r\n\t\tconst btnClearText=()=>{\r\n\t\t\t  setText('');\t\t\t\r\n\t\t}\r\n\r\n\t\tconst handleChange=(event)=>{\r\n     setText(event.target.value)\r\n\t\t}\r\n\r\n    return (\r\n\t\t\t\t\t<>\r\n      <div className=\"container\">\r\n\t\t\t\t\t\t\t<h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n  \t\t\t\t\t\t\t\t<textarea className=\"form-control\" id=\"mybox\" rows=\"8\" value={text} onChange={handleChange}></textarea>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary\"  onClick={btnClicked}>convert in uppercase</button>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary mx-2\" onClick={btnlowclicked}>convert in lowercase</button>\r\n\t\t\t\t\t\t\t\t\t\t<button className=\"btn btn-primary mx-2\" onClick={btnClearText}>Clear Text</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"container my-3\">\r\n\t\t\t\t\t\t\t\t <h2>Your Text summary</h2>\r\n\t\t\t\t\t\t\t\t\t<p>Number of characters in your text are :-{text.length}</p>\r\n\t\t\t\t\t\t\t\t\t<p>Number of words in your text are :-{text.split(\" \").length}</p>\r\n\t\t\t\t\t\t\t\t\t<p>Time to read the text :-{0.008* text.split(\" \").length}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</>\r\n    )\r\n}\r\n","import React,{useState} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Routes,\n  Link\n} from \"react-router-dom\";\nimport AboutUs from \"./components/AboutUs\";\nimport Alert from \"./components/Alert\";\nimport Navabar from \"./components/Navabar\";\nimport TextForm from \"./components/TextForm\";\n\n\n//import './App.css';\nfunction App() {\n\n  const [mode,setMode]=useState('light');\n\n  const [modeText,setModeText]=useState('light');\n\n  const [text,setText]=useState('Dark Mode');\n\n  const [alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    },1500)\n  }\n\n  const ToggleMode=()=>{\n    if(mode=='light')\n    {\n      setMode('dark');\n      setModeText('dark');\n      setText('Light Mode')\n      document.body.style.backgroundColor=\"#495057\";\n      document.body.style.color=\"white\";\n      showAlert('Dark Mode Enabled','success');\n    }\n    else{\n      setMode('light')\n      setModeText('light')\n      setText('Dark Mode')\n      document.body.style.backgroundColor=\"white\";\n      document.body.style.color=\"black\";\n      showAlert('Light Mode Enabled','success');\n    }\n  }\n  return (\n   <>\n    <Router>\n\t\t<Navabar title=\"Text Utils\" togglemode={ToggleMode} mode={mode} modeText={modeText} text={text}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\" >\n    <Switch>\n          <Route exact path=\"/about\">\n            <AboutUs />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm heading=\"Enter the Text Below\"/>\n          </Route>\n        </Switch>\n  </div>\n  </Router>\n\t</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}